{"version":3,"sources":["assets/logo.png","firebase.js","Header.js","Home.js","Form.js","PlantResults.js","DisplayAll.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","className","src","logo","Home","to","Form","handleChange","event","setState","userSelection","target","value","state","action","id","onChange","this","onClick","e","getBenefit","Component","PlantResults","displayPlant","map","selectedBenefit","imgPath","imgName","imgToken","alt","name","key","tId","type","bId","benefit","cId","caution","DisplayAll","displayAllPlants","plants","Footer","App","whichBenefit","userChoice","preventDefault","findPlants","plantResults","filter","benefitSelection","plantMatch","HomeImg","database","ref","on","response","newState","data","val","push","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c8570fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.61b2e558.png\";","import firebase from 'firebase';\r\n \r\n // Your web app's Firebase configuration\r\n const firebaseConfig = {\r\n    apiKey: \"AIzaSyBBcz7SxXwGS7nqKX6sVn_R5VxIn4ast2M\",\r\n    authDomain: \"project5-e9638.firebaseapp.com\",\r\n    databaseURL: \"https://project5-e9638.firebaseio.com\",\r\n    projectId: \"project5-e9638\",\r\n    storageBucket: \"project5-e9638.appspot.com\",\r\n    messagingSenderId: \"898218317733\",\r\n    appId: \"1:898218317733:web:d2e638974421ddaeabba4c\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  \r\n  export default firebase;","import React from 'react';\r\nimport logo from './assets/logo.png'\r\n\r\nfunction Header(props){\r\n    return(\r\n\r\n        <header className = \"headerWrapper\">\r\n        \r\n            <div className = \"headerFlex\">\r\n                <h1>Apothecary Kitchen</h1>\r\n                <div className = \"logo\">\r\n                    <img src={logo} />\r\n                </div>\r\n            </div>\r\n            \r\n            <h2>a medicinal plant and herb database</h2>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from './Header.js';\r\n\r\n\r\n\r\nfunction Home (props){\r\n    return(\r\n        \r\n            <div className=\"hero\">\r\n                <div className=\"wrapper\">\r\n                    \r\n                    <Header />\r\n\r\n                        <main className=\"wrapper\">\r\n\r\n                            <div className=\"homeTextBox\">\r\n                                <p className=\"homeText\">\r\n                                    Apothecary Kitchen allows you to search various medicinal plant based on their beneficial qualities.  Learn about which plants can help you with feel better and improve your health.\r\n                                </p>\r\n\r\n                            <div className=\"linkBox\">\r\n                                <Link\r\n                                    className=\"search\"\r\n                                    to=\"/kitchen-apothecary/search\">\r\n                                    search plants\r\n                                </Link>\r\n\r\n                                <Link\r\n                                    className=\"display\"\r\n                                    to=\"/kitchen-apothecary/displayall\">\r\n                                    display all\r\n                                </Link>\r\n\r\n                            </div>\r\n                            \r\n\r\n                            </div>\r\n                            \r\n                        </main>\r\n\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Form extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userSelection: ''\r\n        }\r\n    }\r\n\r\nhandleChange = (event) =>{\r\n    this.setState({\r\n        userSelection: event.target.value\r\n    })\r\n}\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n                <form action=\"\" id=\"form\">\r\n\r\n                    <div className=\"formFlex\">\r\n                        <label>\r\n                            <select onChange={this.handleChange} className=\"whichBenefit\" id=\"whichBenefit\">\r\n                                <option value=\"selectProperty\">What would you like help with: </option>\r\n                                <option value=\"anxiety\">Anxiety</option>\r\n                                <option value=\"immune support\">Immune Support</option>\r\n                                <option value=\"inflammation\">Inflammation</option>\r\n                                <option value=\"circulatory support\">Circulatory Support</option>\r\n                                <option value=\"engery boost\">Energy Boost</option>\r\n                            </select>\r\n\r\n                        </label>\r\n                        <button className=\"selectBttn\" onClick={(e) => this.props.getBenefit(e, this.state.userSelection)}>Select</button>\r\n                    </div>\r\n\r\n                <Link className=\"homeBttnSearch\" to=\"/kitchen-apothecary/\">home</Link>\r\n\r\n\r\n                </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n    export default Form;","import React from 'react';\r\n\r\n\r\nfunction PlantResults(props){\r\n\r\n    return(\r\n       \r\n          props.displayPlant.map( (selectedBenefit) => {\r\n\r\n              const imgPath = `https://firebasestorage.googleapis.com/v0/b/project5-e9638.appspot.com/o/${selectedBenefit.imgName}?alt=media&token=${selectedBenefit.imgToken}`;\r\n\r\n            return ( \r\n              <div>\r\n\r\n                <div className = \"imgCont\">\r\n                  <img src={imgPath} alt={selectedBenefit.name}/>\r\n                </div>\r\n                <h3>{selectedBenefit.name}</h3>\r\n\r\n                <ul className = \"plantGridTextbox\">\r\n                  <li key = {selectedBenefit.tId}>\r\n                    <p className = \"fieldName\">type: </p>\r\n                    <p>{selectedBenefit.type}</p>\r\n                  </li>\r\n\r\n                  <li key = {selectedBenefit.bId}>\r\n                    <p className = \"fieldName\">benefit: </p>\r\n                    <p>{selectedBenefit.benefit}</p>\r\n                  </li>\r\n\r\n                  <li key = {selectedBenefit.cId}>\r\n                    <p className = \"fieldName\">caution: </p>\r\n                    <p>{selectedBenefit.caution}</p>\r\n                  </li>\r\n                </ul>\r\n              \r\n              </div>\r\n          \r\n            )\r\n        })  \r\n    )\r\n}\r\n\r\nexport default PlantResults;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from './Header.js';\r\n\r\nfunction DisplayAll(props){\r\n    return(\r\n        \r\n\r\n        <ul className=\"displayAllGrid\">\r\n\r\n            {props.displayAllPlants.map( (plants)=>{\r\n            \r\n                const imgPath = `https://firebasestorage.googleapis.com/v0/b/project5-e9638.appspot.com/o/${plants.imgName}?alt=media&token=${plants.imgToken}`;\r\n                \r\n                return(\r\n\r\n                    <li className=\"displayAllItem\">\r\n                        <div className=\"imgCont\">\r\n                            <img src={imgPath} alt={plants.name} />\r\n                            <div className=\"displayMask\">\r\n                                <ul className=\"plantGridTextbox\">\r\n                                    <li key={plants.tId}>\r\n                                        <p className=\"fieldName\">type: </p>\r\n                                        <p>{plants.type}</p>\r\n                                    </li>\r\n\r\n                                    <li key={plants.bId}>\r\n                                        <p className=\"fieldName\">benefit: </p>\r\n                                        <p>{plants.benefit}</p>\r\n                                    </li>\r\n\r\n                                    <li key={plants.cId}>\r\n                                        <p className=\"fieldName\">caution: </p>\r\n                                        <p>{plants.caution}</p>\r\n                                    </li>\r\n                                </ul>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <h3>{plants.name}</h3>\r\n                    </li>\r\n\r\n                    )\r\n                }) \r\n            }\r\n\r\n            <Link className=\"homeBttnDisplay\" to=\"/kitchen-apothecary/\">home</Link>\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default DisplayAll;","import React from 'react';\r\n\r\nfunction Footer(props){\r\n    return(\r\n        <footer>\r\n            <p>© 2020 Laura MacKew</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport firebase from './firebase';\nimport Header from './Header.js';\nimport Home from './Home.js';\nimport Form from './Form.js'\nimport PlantResults from './PlantResults.js';\nimport DisplayAll from './DisplayAll';\nimport Footer from './Footer';\n\n\nclass App extends Component{\n  constructor() {\n    super();\n\n\t\tthis.state = {\n      plants: [],\n      userSelection: \"\",\n      plantMatch: [],\n      HomeImg: true,\n      \n    }\n  }\n\n  componentDidMount(){\n      const dbRef = firebase.database().ref();\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n        for(let key in data){\n          newState.push(data[key]);\n        }\n        this.setState({\n          plants: newState            \n        })\n      }); \n  }\n\n    // get user selection from form component\n      whichBenefit = (e, userChoice) => {\n        e.preventDefault();\n        this.findPlants(userChoice);\n      }\n\n      // filter plants array to find plants that match the chosen benefit and save to state\n\n      findPlants = (benefit) => {\n        const oldPlantsArray = [...this.state.plants];\n        const plantResults = oldPlantsArray.filter( (benefitSelection) => {\n          return benefitSelection.benefit === benefit;\n        })        \n        this.setState({\n          plantMatch: plantResults  \n        }\n      )\n    }\n\n    // scroll to plant results\n\n    // scrollTo = () => {\n    //   const element = document.getElementById('form');\n    //   console.log(element);\n    //   element.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n\n    // }\n\n  render(){\n    \n    return (\n      <Router>\n        \n            <Route path=\"/kitchen-apothecary\" component={Home} exact />\n\n            <Route path=\"/kitchen-apothecary/search\">\n\n              <div className=\"wrapper\">\n\n                <Header />\n\n              </div>\n              \n              \n              <main className=\"wrapper\">\n                \n                <Form getBenefit={this.whichBenefit} />\n\n                <div className=\"plantGrid\">\n                  <PlantResults displayPlant={this.state.plantMatch} />\n                </div>\n\n              </main>\n            </Route>\n\n            <Route path=\"/kitchen-apothecary/displayall\">\n\n              <div className=\"wrapper\">\n\n                <Header />\n                \n              </div>\n            \n              <main className=\"wrapper\">\n                \n                <DisplayAll displayAllPlants={this.state.plants} />\n\n            </main>\n          </Route>\n\n          {/* <Footer /> */}\n        \n      </Router>\n      );\n    }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}