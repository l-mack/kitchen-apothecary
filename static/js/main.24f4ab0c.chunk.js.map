{"version":3,"sources":["assets/logo.png","assets/aloeVera.jpg","assets/ashwagandha.jpg","assets/chamomile.jpg","assets/echinacea.jpg","assets/garlic.jpg","assets/ginger.jpg","assets/ginseng.jpg","assets/marigold.jpg","assets/turmeric.jpg","assets/valerian.jpg","firebase.js","Header.js","Form.js","PlantResults.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","className","src","logo","Form","handleChange","event","setState","userSelection","target","value","state","action","onChange","this","id","onClick","e","getBenefit","Component","PlantResults","imgPath","displayPlant","map","selectedBenefit","name","aloeVera","ashwagandha","chamomile","echinacea","garlic","ginger","ginseng","marigold","turmeric","valerian","alt","key","tId","type","bId","benefit","cId","caution","App","whichBenefit","userChoice","preventDefault","findPlants","plantResults","plants","filter","benefitSelection","plantMatch","database","ref","on","response","newState","data","val","push","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.24f4ab0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.61b2e558.png\";","module.exports = __webpack_public_path__ + \"static/media/aloeVera.6ed86a73.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ashwagandha.6b28e694.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chamomile.cdfb202a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/echinacea.29c048cc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/garlic.07047c74.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ginger.89cbe9ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ginseng.d97a100e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/marigold.5015c525.jpg\";","module.exports = __webpack_public_path__ + \"static/media/turmeric.0f8eb9aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/valerian.e27c8692.jpg\";","import firebase from 'firebase';\r\n \r\n // Your web app's Firebase configuration\r\n const firebaseConfig = {\r\n    apiKey: \"AIzaSyBBcz7SxXwGS7nqKX6sVn_R5VxIn4ast2M\",\r\n    authDomain: \"project5-e9638.firebaseapp.com\",\r\n    databaseURL: \"https://project5-e9638.firebaseio.com\",\r\n    projectId: \"project5-e9638\",\r\n    storageBucket: \"project5-e9638.appspot.com\",\r\n    messagingSenderId: \"898218317733\",\r\n    appId: \"1:898218317733:web:d2e638974421ddaeabba4c\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  \r\n  export default firebase;","import React from 'react';\r\nimport logo from './assets/logo.png'\r\n\r\nfunction Header(props){\r\n    return(\r\n\r\n        <header className = \"wrapper\">\r\n        \r\n            <div className = \"headerFlex\">\r\n                <h1>Apothecary Kitchen</h1>\r\n                <div className = \"logo\">\r\n                    <img src={logo} />\r\n                </div>\r\n            </div>\r\n            \r\n            <h2>a medicinal plant and herb database</h2>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userSelection: ''\r\n        }\r\n    }\r\n\r\nhandleChange = (event) =>{\r\n    this.setState({\r\n        userSelection: event.target.value\r\n    })\r\n}\r\n\r\n    render(){\r\n\r\n        return(\r\n            <form action=\"\">\r\n                <label>\r\n                    <select onChange={this.handleChange} className=\"whichBenefit\" id=\"whichBenefit\">\r\n                        <option value=\"selectProperty\">What would you like help with: </option>\r\n                        <option value=\"anxiety\">Anxiety</option>\r\n                        <option value=\"immune support\">Immune Support</option>\r\n                        <option value=\"inflammation\">Inflammation</option>\r\n                        <option value=\"circulatory support\">Circulatory Support</option>\r\n                        <option value=\"engery boost\">Energy Boost</option>\r\n\r\n                    </select>\r\n                </label>\r\n                <button onClick={ (e) => this.props.getBenefit(e, this.state.userSelection)}>Select</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n    export default Form;","import React from 'react';\r\nimport aloeVera from './assets/aloeVera.jpg';\r\nimport ashwagandha from './assets/ashwagandha.jpg';\r\nimport chamomile from './assets/chamomile.jpg';\r\nimport echinacea from './assets/echinacea.jpg';\r\nimport garlic from './assets/garlic.jpg';\r\nimport ginger from './assets/ginger.jpg';\r\nimport ginseng from './assets/ginseng.jpg';\r\nimport marigold from './assets/marigold.jpg';\r\nimport turmeric from './assets/turmeric.jpg';\r\nimport valerian from './assets/valerian.jpg';\r\n\r\n\r\nfunction PlantResults(props){\r\n\r\n  let imgPath = '';\r\n\r\n    return(\r\n       \r\n          props.displayPlant.map( (selectedBenefit) => {\r\n    \r\n              if (selectedBenefit.name === 'Aloe Vera'){\r\n                imgPath = aloeVera;\r\n              } else if (selectedBenefit.name === 'Ashwagandha'){\r\n                imgPath = ashwagandha;\r\n              } else if (selectedBenefit.name === 'Chamomile'){\r\n                imgPath = chamomile;\r\n              } else if (selectedBenefit.name === 'Echinacea'){\r\n                imgPath = echinacea;\r\n              } else if (selectedBenefit.name === 'Garlic'){\r\n                imgPath = garlic;\r\n              } else if (selectedBenefit.name === 'Ginger'){\r\n                imgPath = ginger;\r\n              } else if (selectedBenefit.name === 'Ginseng'){\r\n                imgPath = ginseng;\r\n              } else if (selectedBenefit.name === 'Marigold'){\r\n                imgPath = marigold;\r\n              } else if (selectedBenefit.name === 'Turmeric'){\r\n                imgPath = turmeric;\r\n              } else if (selectedBenefit.name === 'Valerian'){\r\n                imgPath = valerian;\r\n              }\r\n\r\n            return ( \r\n              \r\n                <div className = \"plantGrid\"> \r\n\r\n                    <div className = \"imgCont\">\r\n                      <img src={imgPath} alt={selectedBenefit.name}/>\r\n                    </div>\r\n                    <h3>{selectedBenefit.name}</h3>\r\n\r\n                    <ul className = \"plantGridTextbox\">\r\n                      <li key = {selectedBenefit.tId}><p className = \"fieldName\">type: </p><p>{selectedBenefit.type}</p></li>\r\n                      <li key = {selectedBenefit.bId}><p className = \"fieldName\">benefit: </p><p>{selectedBenefit.benefit}</p></li>\r\n                      <li key = {selectedBenefit.cId}><p className = \"fieldName\">caution: </p><p>{selectedBenefit.caution}</p></li>\r\n                    </ul>\r\n              \r\n                </div>\r\n          \r\n            )\r\n        })  \r\n    )\r\n}\r\n\r\nexport default PlantResults;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport Header from './Header.js';\nimport Form from './Form.js'\nimport PlantResults from './PlantResults.js';\n\nclass App extends Component{\n  constructor() {\n    super();\n\n\t\tthis.state = {\n      plants: [],\n      userSelection: \"\",\n      plantMatch: []\n    }\n  }\n\n  componentDidMount(){\n      const dbRef = firebase.database().ref();\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n        for(let key in data){\n          newState.push(data[key]);\n        }\n        this.setState({\n          plants: newState            \n        }, () =>{\n          console.log(this.state.plants)\n        })\n    });\n  }\n\n    // get user selection from form component\n      whichBenefit = (e, userChoice) => {\n        e.preventDefault();\n        this.findPlants(userChoice);\n      }\n\n      // filter plants array to find plants that match the chosen benefit and save to state\n\n      findPlants = (benefit) => {\n        \n        const plantResults = this.state.plants.filter( (benefitSelection) => {\n          return benefitSelection.benefit === benefit;\n        })        \n        this.setState({\n          plantMatch: plantResults\n          \n        }\n        )\n      }\n\n  render(){\n    return (\n      <div className=\"formFlex\">\n\n        < Header />\n\n        < Form getBenefit={this.whichBenefit} />\n\n        <main className = \"wrapper\">\n\n        < PlantResults displayPlant={this.state.plantMatch} />\n\n        </main>\n\n        </div>\n      );\n    }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}